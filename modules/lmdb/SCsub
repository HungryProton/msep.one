import glob
import os
Import("env")
Import("env_modules")

env_lmdb = env_modules.Clone()
env_lmdb.disable_warnings()
Export("env_lmdb")

# capnp_sources & dependencies` object files are generated by the following scripts separatedly

SConscript("thirdparty/capnpSCsub")

# Adding the source files of liblmdb for scons to compile and link as a dependency later
lmdb_sources = glob.glob(os.path.join("thirdparty", "liblmdb", "*.c"), )
env_lmdb.Prepend(CPPFLAGS=[os.path.join(os.getcwd(), "thirdparty", "capnproto", "c++", "src")])
env_lmdb.Prepend(CPPPATH=[os.path.join(os.getcwd(), "thirdparty", "capnproto", "c++", "src")])

if env_lmdb["platform"] == "windows" and not env_lmdb["use_mingw"]:
	# LMDB uses linux only sources, we are providing a windows replacement for them. mingw already provides those so there is no need to add them in this situation.
	lmdb_sources.append(os.path.join("thirdparty", "windows", "getopt.c"))
	env_lmdb.Prepend(CPPPATH=[os.path.join(os.getcwd(), "thirdparty", "windows")])

files_to_remove = []
for item in lmdb_sources:
	filename = item.split(os.sep)[-1]
	if filename.startswith("mtest") or filename.startswith("mplay"):
		files_to_remove.append(item)
for item in files_to_remove:
	lmdb_sources.remove(item)

module_objects = []
env_lmdb.add_source_files(module_objects, lmdb_sources) # Add all sources for lmdb
dependencies_objects = []
env_lmdb.add_source_files(module_objects, "*.cpp") # Add all cpp files to the build
env.modules_sources += module_objects

env.Prepend(CPPPATH=[os.path.join(os.getcwd(), "thirdparty", "capnproto", "c++", "src")])
